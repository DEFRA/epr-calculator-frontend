@using EPR.Calculator.Frontend.Constants;

@{
    Layout = "_Layout";
    var BackLink = "Dashboard";
    var items = ViewBag.Data;
    var communicationData = ViewBag.CommunicationData;
    var operatingCosts = ViewBag.OperatingCosts;
    var preparationCosts = ViewBag.PreparationCosts;
    var schemeSetupCosts = ViewBag.SchemeSetupCosts;
    var lateReportingTonnage = ViewBag.LateReportingTonnage;
    var materialityThreshold = ViewBag.MaterialityThreshold;
    var badDebtProvision = ViewBag.BadDebtProvision;
    var levy = ViewBag.Levy;
    var tonnageChange = ViewBag.TonnageChange;
    var effectiveFrom = ViewBag.EffectiveFrom;
}

<script src="~/lib/jquery/dist/jquery.min.js"></script>

<div class="govuk-width-container ">

    <main class="govuk-main-wrapper govuk-!-padding-top-4" id="main-content" role="main">

        <partial name="_BackLinkPartial" model="BackLink" />

        @if(ViewBag.IsDataAvailable)
        {
            <div class="govuk-caption-l">Last updated by Jamie Roberts at <span id="effective-from"></span></div><br>
        }
        <h1 class="govuk-heading-xl">Default calculator parameters</h1>

        <div class="govuk-grid-row">
            <div class="govuk-grid-column-two-thirds">
                @if(ViewBag.IsDataAvailable)
                {
                    <h2 class="govuk-heading-l">@ParameterType.CommunicationCosts</h2>
                    <partial name="_ItemListPartial" model="communicationData" view-data='new ViewDataDictionary(ViewData) { { "IsDisplayPrefix", true } }' />

                   
                    <h2 class="govuk-heading-l">@ParameterType.SchemeAdministratorOperatingCosts</h2>
                    <partial name="_ItemListPartial" model="operatingCosts" view-data='new ViewDataDictionary(ViewData) { { "IsDisplayPrefix", true } }' />


                    <h2 class="govuk-heading-l">@ParameterType.LocalAuthorityDataPreparationCosts</h2>
                    <partial name="_ItemListPartial" model="preparationCosts" view-data='new ViewDataDictionary(ViewData) { { "IsDisplayPrefix", true } }' />


                    <h2 class="govuk-heading-l">@ParameterType.SchemeSetupCosts</h2>
                    <partial name="_ItemListPartial" model="schemeSetupCosts" view-data='new ViewDataDictionary(ViewData) { { "IsDisplayPrefix", true } }' />


                    <h2 class="govuk-heading-l">@ParameterType.LateReportingTonnage</h2>
                    <partial name="_ItemListPartial" model="lateReportingTonnage" view-data='new ViewDataDictionary(ViewData) { { "IsDisplayPrefix", false } }' />

                    @if(@badDebtProvision.Count >0)
                    {
                        <h2 class="govuk-heading-l">@ParameterType.BadDebtProvision</h2>
                        <partial name="_ItemListPartial" model="badDebtProvision" view-data='new ViewDataDictionary(ViewData) { { "IsDisplayPrefix", false } }' />
                    }
                        @if(@levy.Count >0)
                    {
                        <h2 class="govuk-heading-l">@ParameterType.Levy</h2>
                        <partial name="_ItemListPartial" model="levy" view-data='new ViewDataDictionary(ViewData) { { "IsDisplayPrefix", true } }' />
                    }

                    <h2 class="govuk-heading-l">@ParameterType.MaterialityThreshold</h2>
                    <partial name="_ItemListPartial" model="materialityThreshold" view-data='new ViewDataDictionary(ViewData) { { "IsDisplayPrefix", true } }' />


                    <h2 class="govuk-heading-l">@ParameterType.TonnageChangeThreshold</h2>
                    <partial name="_ItemListPartial" model="tonnageChange" view-data='new ViewDataDictionary(ViewData) { { "IsDisplayPrefix", true } }' />
                }
                else
                {
                    <span class="govuk-caption-xl">Default parameters have not been set.</span>
                    <br />
                    <hr />
                    <p class="govuk-body govuk-!-margin-top-6 govuk-!-margin-bottom-8">
                        You will need to upload a CSV file using the <a class="govuk-link" href="@Url.Action("DownloadCsvTemplate", "UploadFile")">default parameters template</a> to set them before you can run any calculations.
                    </p>
                }

                <form action="/form-handler" method="post" novalidate="">
                    <input type="hidden" name="answers-checked" value="true">
                    <div class="govuk-button-group">
                        <a href="@Url.Action("Index", "UploadFile")" class="govuk-button" type="submit">Upload new default parameters</a>
                        <a href="@Url.Action("Index", "Dashboard")" class="govuk-link" href="dash">Return to the dashboard</a>
                    </div>
                </form>


            </div>
        </div>

    </main>

</div>

<script type="text/javascript">
    $(document).ready(() => {
        const [dateString, timeString] = ('@effectiveFrom').split(' ');

        var day = month = year = 0;

        console.log('DATE STRING', dateString);
        

        if (isNaN(Date(dateString))) {
            [day, month, year] = dateString.split('/');
            console.log('IS NAN');
        } else {
            [month, day, year] = dateString.split('/');
            console.log('NAN');
        }

        console.log('DAY', day);
        console.log('MONTH', month);
        console.log('YEAR', year);
        
        const [hour, minute, second] = timeString.split(':');

        const localDate = convertUTCDateToLocalDate(new Date(year, month - 1, day, hour, minute, second));

        console.log('LOCAL DATE', localDate);

        const dateValueFormatted = '<b>' + localDate.getHours() + ':' + String(localDate.getMinutes()).padStart(2, "0") + '</b> on ' + localDate.toLocaleDateString('en-gb', { day: 'numeric', month: 'short', year: 'numeric' });
        $('#effective-from').html(dateValueFormatted);

        console.log('DATE FORMATTED', dateValueFormatted);
    });

    function convertUTCDateToLocalDate(date) {
        var newDate = new Date(date.getTime() + date.getTimezoneOffset() * 60 * 1000);

        var offset = date.getTimezoneOffset() / 60;
        var hours = date.getHours();

        newDate.setHours(hours - offset);

        return newDate;
    }
</script>