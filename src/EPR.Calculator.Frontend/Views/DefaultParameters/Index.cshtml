@using EPR.Calculator.Frontend.Constants;
@using EPR.Calculator.Frontend.ViewModels;
@using EPR.Calculator.Frontend.Extensions;

@model DefaultParametersViewModel

@{
    Layout = "_Layout";
    var BackLink = "Dashboard";
}

<script src="~/lib/jquery/dist/jquery.min.js"></script>

<div class="govuk-width-container">

    <main class="govuk-main-wrapper govuk-!-padding-top-4" id="main-content" role="main">

        <partial name="_BackLinkPartial" model="(BackLink, Model.CurrentUser)" />

        @if(Model.IsDataAvailable)
        {
            <div class="govuk-caption-l">Last updated by @Model.LastUpdatedBy at <span id="effective-from"></span></div><br>
        }
        <h1 class="govuk-heading-xl">Default calculator parameters</h1>

        <div class="govuk-grid-row">
            <div class="govuk-grid-column-two-thirds">
                @if(Model.IsDataAvailable)
                {
                    @foreach (ParameterType name in (ParameterType[])Enum.GetValues(typeof(ParameterType)))
                    {
                        var schemeparameterValue = @Model.SchemeParameters.First(t => t.SchemeParameterName == name.GetDisplayName());
                        if (name == ParameterType.BadDebtProvision && schemeparameterValue.DefaultSchemeParameters.Count() <= 0) { continue; }

                        <h2 class="govuk-heading-l">@name.GetDisplayName()</h2>
                        <partial name="_ItemListPartial" model="schemeparameterValue" />
                        
                    }                    
                }
                else
                {
                    <span class="govuk-caption-xl">Default parameters have not been set.</span>
                    <br />
                    <hr />
                    <p class="govuk-body govuk-!-margin-top-6 govuk-!-margin-bottom-8">
                        You will need to upload a CSV file using the <a class="govuk-link" href="@Url.Action("DownloadCsvTemplate", "ParameterUploadFile")">default parameters template</a> to set them before you can run any calculations.
                    </p>
                }

                @using (Html.BeginForm("DeleteCalculation", "CalculationRunDetails", FormMethod.Post))
                {
                    @Html.AntiForgeryToken()
                    <input type="hidden" name="answers-checked" value="true">
                    <div class="govuk-button-group">
                        <a href="@Url.Action("Index", "ParameterUploadFile")" class="govuk-button" type="submit">Upload new default parameters</a>
                        <a href="@Url.Action("Index", "Dashboard")" class="govuk-link" href="dash">Return to the dashboard</a>
                    </div>
                }


            </div>
        </div>

    </main>

</div>

<script type="text/javascript">
    $(document).ready(() => {
        const [dateString, timeString] = ("@Model.EffectiveFrom").split(' ');

        var day = month = year = 0;
        
        // MM/DD/YYYY is the date format in Azure portal
        // DD/MM/YYYY is the date format in local environment
        // This condition check is required to correctly get the values of day and month based on the environment
        if (isNaN(new Date(dateString))) {
            [day, month, year] = dateString.split('/');
        } else {
            [month, day, year] = dateString.split('/');
        }
        
        const [hour, minute, second] = timeString.split(':');

        const localDate = convertUTCDateToLocalDate(new Date(year, month - 1, day, hour, minute, second));

        const dateValueFormatted = '<b>' + localDate.getHours() + ':' + String(localDate.getMinutes()).padStart(2, "0") + '</b> on ' + localDate.toLocaleDateString('en-gb', { day: 'numeric', month: 'short', year: 'numeric' });
        $('#effective-from').html(dateValueFormatted);
    });

    function convertUTCDateToLocalDate(date) {
        var newDate = new Date(date.getTime() + date.getTimezoneOffset() * 60 * 1000);

        var offset = date.getTimezoneOffset() / 60;
        var hours = date.getHours();

        newDate.setHours(hours - offset);

        return newDate;
    }
</script>