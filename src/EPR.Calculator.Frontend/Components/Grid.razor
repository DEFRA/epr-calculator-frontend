@using System.Net.Http.Json
@using System.Text.Json.Serialization;
@using System.Net.Http
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Components.Routing
@using Microsoft.JSInterop
@using Microsoft.AspNetCore.Components.Web
@using MudBlazor
@inject HttpClient Http;

@* Required *@
<MudThemeProvider />
<MudPopoverProvider />

@* Needed for dialogs *@
<MudDialogProvider />

@* Needed for snackbars *@
<MudSnackbarProvider />

<style type="text/css">
     .mud-table-head .header-centered th {
         text-align: center;
         font-size: 1.2em;
     }

    .mud-table-foot .bold-text .mud-table-cell {
        font-weight: 500;
    }
</style>
<MudForm @ref="form" OnValidSubmit="HandleSubmit" >

<MudTable @ref="_orgtableRef" Items="@OrgProducers" MultiSelection="true" @bind-SelectedItems="selectedItems" Hover="true" Breakpoint="Breakpoint.Sm" Striped="false" Bordered="true"
          CustomHeader="true" CustomFooter="true" HeaderClass="table-head-bordered" FooterClass="table-foot-bordered">
    <HeaderContent>
        <MudTHeadRow IgnoreCheckbox="true" Class="header-centered">
            <MudTh colspan="6">Producer details</MudTh>
        </MudTHeadRow>        
        <MudTHeadRow Checkable="true">
            <MudTh>Organisationname</MudTh>
            <MudTh>Organisation ID</MudTh>
            <MudTh>Billing instruction</MudTh>
            <MudTh>Invoice amount</MudTh>
            <MudTh>Status</MudTh>
        </MudTHeadRow>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Organisation name">@context.OrganisationName</MudTd>
        <MudTd DataLabel="Organisation ID">@context.OrganisationID</MudTd>
        <MudTd DataLabel="Billing instruction"><MudHighlighter Class="govuk-tag govuk-tag--light-blue" Text="@context.BillingInstructions" HighlightedText="@context.BillingInstructions" /></MudTd>
        <MudTd DataLabel="Invoice amount" HideSmall="_hidePosition">@context.InvoiceAmount</MudTd>
        <MudTd DataLabel="Status"><MudHighlighter Class="govuk-tag govuk-tag--green" Text="@context.Status" HighlightedText="@context.Status" /></MudTd>
    </RowTemplate>
    <FooterContent>        
        <MudTFootRow Checkable="true">
            <MudTd colspan="5">Selected: @selectedItems.Count</MudTd>
        </MudTFootRow>
        <MudTFootRow  Checkable="false">
            <MudTd colspan="5"><MudCheckBox @bind-Value="PageSelectionState">Select only current page items</MudCheckBox> </MudTd>
        </MudTFootRow>
    </FooterContent>
    <PagerContent>
        <MudTablePager PageSizeOptions="new int[] { 20, 40, 60, 100, int.MaxValue }"
                       RowsPerPageString="@rowsPerPageString"
                       InfoFormat="@infoFormat"
                       AllItemsText="@allItemsText"
                       HorizontalAlignment="@horizontalAlignment"
                       HideRowsPerPage="@hideRowsPerPage"
                       HidePageNumber="@hidePageNumber"
                       HidePagination="@hidePagination" />
    </PagerContent>
</MudTable>

<MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary">Submit</MudButton>
</MudForm>
@* <MudSwitch @bind-Value="PageSelection" Color="Color.Primary">Select All only current page</MudSwitch> *@
@code {
    private bool _hidePosition;
    private List<OrgProducerData> OrgProducers = new List<OrgProducerData>();
    private HashSet<OrgProducerData> selectedItems = new HashSet<OrgProducerData>();
    private HorizontalAlignment horizontalAlignment = HorizontalAlignment.Right;
    private bool hidePageNumber;
    private bool hidePagination;
    private bool hideRowsPerPage;
    private string rowsPerPageString = "Rows per page:";
    private string infoFormat = "{first_item}-{last_item} of {all_items}";
    private string allItemsText = "All";
    private MudTable<OrgProducerData> _orgtableRef;
    private MudForm form;
    private string ResponseMessage;

    protected override async Task OnInitializedAsync()
    {
        OrgProducers = new List<OrgProducerData>();
        var count = 90;

        for(int i= 1; i<count; i++)
        {
            OrgProducers.Add(new OrgProducerData() { OrganisationName = "Acme org Ltd", OrganisationID = i.ToString() , BillingInstructions = "DELTA", InvoiceAmount = "£100.000", Status = "ACCEPTED" });
        }

        OrgProducers.Add(new OrgProducerData() { OrganisationName = "Acme org Ltd", OrganisationID = (count+1).ToString(), BillingInstructions = "CANCEL BILL", InvoiceAmount = "£100.000", Status = "REJECTED" });
        OrgProducers.Add(new OrgProducerData() { OrganisationName = "Acme org Ltd", OrganisationID = (count+2).ToString(), BillingInstructions = "INITIAL", InvoiceAmount = "£100.000", Status = "PENDING" });

    }
    class ElementComparer : IEqualityComparer<OrgProducerData>
    {
        public bool Equals(OrgProducerData a, OrgProducerData b) => a?.OrganisationID == b?.OrganisationID;
        public int GetHashCode(OrgProducerData x) => HashCode.Combine(x?.OrganisationID);
    }

    public record OrgProducerData
    {
        public string OrganisationName { get; set; }
        public string OrganisationID { get; set; }
        public string BillingInstructions { get; set; }
        public string InvoiceAmount { get; set; }
        public string Status { get; set; }
    }

    private IEnumerable<OrgProducerData> GetVisiblePageItems()
    {       
        return _orgtableRef.FilteredItems.Skip(_orgtableRef.CurrentPage * _orgtableRef.RowsPerPage).Take(_orgtableRef.RowsPerPage);
    }

    private void SelectPage()
    {
        if (_orgtableRef == null) return;
        var pageItems = GetVisiblePageItems();
        foreach (var item in pageItems)
            selectedItems.Add(item);
    }
    private void DeselectPage()
    {
        if (_orgtableRef == null) return;
        var pageItems = GetVisiblePageItems();
        foreach (var item in pageItems)
            selectedItems.Remove(item);
    }
    private bool? PageSelectionState
    {
        get
        {
            if (_orgtableRef == null) return false;
            var pageItems = GetVisiblePageItems();
            if (pageItems.All(item => selectedItems.Contains(item)))
                return true; // All items are selected
            if (pageItems.Any(item => selectedItems.Contains(item)))
                return null; // Some items are selected (indeterminate)
            return false; // No items are selected
        }
        set
        {
            if (value == true || value == null)
            {
                SelectPage();
            }
            else if (value == false)
            {
                DeselectPage();
            }
        }
    }

    private async Task HandleSubmit()
    {
        var response = await Http.PostAsJsonAsync("blazoreGrid/submit", selectedItems);
        if (response.IsSuccessStatusCode)
        {
            var json = await response.Content.ReadAsStringAsync();
            ResponseMessage = json;
        } else
        {
            ResponseMessage = "Form failed to Submit";
        }
    }    

}